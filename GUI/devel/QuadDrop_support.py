#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 5.0.3
#  in conjunction with Tcl version 8.6
#    Mar 16, 2020 02:36:08 AM IST  platform: Linux

import sys
import os,subprocess
from subprocess import check_output
import PIL.Image, PIL.ImageTk

try:
	import Tkinter as tk
except ImportError:
	import tkinter as tk

try:
	import ttk
	py3 = False
except ImportError:
	import tkinter.ttk as ttk
	py3 = True

def set_Tk_var():
	global che48
	che48 = tk.IntVar()

def disable_enable_button():
	#w.Altitude.configure(text='''40.2''')
	w.EmStopButton.configure(state='normal' if che48.get() else 'disable')

def init(top, gui, *args, **kwargs):
	global w, top_level, root
	w = gui
	top_level = top
	root = top

def create_grid(event=None):
    wid = 2000 # Get current width of canvas
    hei = 2000 # Get current height of canvas
    w.XYPositionalData.delete('grid_line') # Will only remove the grid_line

    # Creates all vertical lines at intevals of 100
    for i in range(0, wid, 100):
        w.XYPositionalData.create_line([(i, 0), (i, hei)], tag='grid_line')

    # Creates all horizontal lines at intevals of 100
    for i in range(0, hei, 100):
        w.XYPositionalData.create_line([(0, i), (wid, i)], tag='grid_line')


def dmode():
	root.configure(bg="#333333")
	w.style.configure('.',background="#333333")
	w.style.configure('.',foreground="#ffffff")
	w.Logo.configure(background="#333333" , foreground="#ffffff")
	w.StatusLabel.configure(background="#333333" , foreground="#ffffff") 
	w.Status.configure(background="#333333")
	w.BatteryLabel.configure(background="#333333" , foreground="#ffffff")
	#w.Battery.configure(background="#333333" , foreground="#ffffff")
	w.WifiLabel.configure(background="#333333" , foreground="#ffffff")
	#w.Battery.configure(background="#333333" , foreground="#ffffff")
	#w.AlitutdeBar.configure(background="#333333" , foreground="#ffffff")
	#w.SpeedBar.configure(background="#333333" , foreground="#ffffff")
	w.AltitudeLabel.configure(background="#333333" , foreground="#ffffff")
	w.SpeedLabel.configure(background="#333333" , foreground="#ffffff")
	w.ModeLabel.configure(background="#333333" , foreground="#ffffff")
	w.Mode.configure(background="#333333" , foreground="#ffffff")
	w.Wifi.configure(background="#333333" , foreground="#ffffff")
	w.Altitude.configure(background="#333333" , foreground="#ffffff")
	w.Speed.configure(background="#333333" , foreground="#ffffff")

	w.XYPositionalData.configure(background="#4a4a4a")
	w.DroneLiveFeed.configure(background="#333333")



	ph = PIL.ImageTk.PhotoImage(PIL.Image.open("/home/krut/devel/logodark.png").resize((200, 50), PIL.Image.ANTIALIAS))
	w.Logo.configure(image = ph)
	w.Logo.image = ph

	ph = PIL.ImageTk.PhotoImage(PIL.Image.open("/home/krut/devel/about-dark.png").resize((857, 408), PIL.Image.ANTIALIAS))
	w.AboutSlide.configure(image = ph)
	w.AboutSlide.image = ph

	ph = PIL.ImageTk.PhotoImage(PIL.Image.open("/home/krut/devel/credits-dark.png").resize((857, 408), PIL.Image.ANTIALIAS))
	w.CreditsSlide.configure(image = ph)
	w.CreditsSlide.image = ph
	
	w.Error.configure(background="#333333")
	w.Error.configure(foreground="#333333")
	w.ConnectButton.configure(background="#333333")
	w.ConnectButton.configure(foreground="#ffffff")
	w.CallbackButton.configure(background="#333333")
	w.CallbackButton.configure(foreground="#ffffff")
	w.dmodeButton.configure(background="#333333")
	w.dmodeButton.configure(foreground="#ffffff")
	w.EmLock.configure(background="#333333")
	
	w.DeliveryDetailsPage.configure(background="#333333")
	w.DroneFlightDataPage.configure(background="#333333")
	w.AboutPage.configure(background="#333333")
	w.CreditsPage.configure(background="#333333")
	w.style.configure('TNotebook.Tab', background="#333333")
	w.style.configure('TNotebook.Tab', foreground="#ffffff")
	w.style.map('TNotebook.Tab', background=[('selected', "#333333"), ('active',"#333333")])

def chk_conn():
		scanoutput = check_output(["iwlist", "wlp2s0", "scan"])
		ssid = "WiFi not found"
		for line in scanoutput.split():
		  line = line.decode("utf-8")
		  if line[:5]  == "ESSID":
			ssid = line.split('"')[1]

		if(ssid=="rn7p"):
			w.Status.configure(text='''Connected''', foreground="#2cbc00")
			w.ConnectButton.place_forget()
		else:
			w.ConnectButton.place(relx=0.886, rely=0.019, height=28, width=189)
			w.Status.configure(text="Disconnected",foreground="#ff0000")
			w.Error.configure(foreground="#ff0000")

def conn():
	if(os.system("nmcli device wifi connect QuadDrop password qwertyuiop")==0):
		w.ConnectButton.place_forget()
		w.Status.configure(text="Connected",foreground="#2cbc00")
		w.Error.place_forget()
	else:
		w.ConnectButton.place(relx=0.886, rely=0.019, height=28, width=189)
		w.Status.configure(text="Disconnected",foreground="#ff0000")
		w.Error.configure(foreground="#ff0000")

def destroy_window():
	# Function which closes the window.
	global top_level
	top_level.destroy()
	top_level = None

if __name__ == '__main__':
	import QuadDrop
	QuadDrop.vp_start_gui()
	




